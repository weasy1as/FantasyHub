
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.0
 * Query Engine version: aee10d5a411e4360c6d3445ce4810ca65adbf3e8
 */
Prisma.prismaVersion = {
  client: "6.10.0",
  engine: "aee10d5a411e4360c6d3445ce4810ca65adbf3e8"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.GameweeksScalarFieldEnum = {
  gw_id: 'gw_id',
  season: 'season',
  gw_number: 'gw_number',
  start_date: 'start_date',
  end_date: 'end_date'
};

exports.Prisma.Merged_gw_summaryScalarFieldEnum = {
  element: 'element',
  name: 'name',
  position: 'position',
  team: 'team',
  games_played: 'games_played',
  total_minutes: 'total_minutes',
  total_goals: 'total_goals',
  total_assists: 'total_assists',
  total_clean_sheets: 'total_clean_sheets',
  yellow_cards: 'yellow_cards',
  red_cards: 'red_cards',
  total_points: 'total_points',
  avg_value: 'avg_value',
  avg_xp: 'avg_xp',
  first_gw: 'first_gw',
  last_gw: 'last_gw'
};

exports.Prisma.MergedgwScalarFieldEnum = {
  name: 'name',
  element: 'element',
  position: 'position',
  team: 'team',
  xp: 'xp',
  assists: 'assists',
  bonus: 'bonus',
  bps: 'bps',
  clean_sheets: 'clean_sheets',
  creativity: 'creativity',
  expected_assists: 'expected_assists',
  expected_goal_involvements: 'expected_goal_involvements',
  expected_goals: 'expected_goals',
  expected_goals_conceded: 'expected_goals_conceded',
  fixture: 'fixture',
  goals_conceded: 'goals_conceded',
  goals_scored: 'goals_scored',
  ict_index: 'ict_index',
  influence: 'influence',
  kickoff_time: 'kickoff_time',
  minutes: 'minutes',
  modified: 'modified',
  opponent_team: 'opponent_team',
  own_goals: 'own_goals',
  penalties_missed: 'penalties_missed',
  penalties_saved: 'penalties_saved',
  red_cards: 'red_cards',
  round: 'round',
  saves: 'saves',
  selected: 'selected',
  starts: 'starts',
  team_a_score: 'team_a_score',
  team_h_score: 'team_h_score',
  threat: 'threat',
  total_points: 'total_points',
  transfers_balance: 'transfers_balance',
  transfers_in: 'transfers_in',
  transfers_out: 'transfers_out',
  value: 'value',
  was_home: 'was_home',
  yellow_cards: 'yellow_cards',
  gw: 'gw'
};

exports.Prisma.Player_statsScalarFieldEnum = {
  stat_id: 'stat_id',
  player_id: 'player_id',
  gw_id: 'gw_id',
  xp: 'xp',
  assists: 'assists',
  bonus: 'bonus',
  bps: 'bps',
  clean_sheets: 'clean_sheets',
  creativity: 'creativity',
  expected_assists: 'expected_assists',
  expected_goal_involvements: 'expected_goal_involvements',
  expected_goals: 'expected_goals',
  expected_goals_conceded: 'expected_goals_conceded',
  fixture: 'fixture',
  goals_conceded: 'goals_conceded',
  goals_scored: 'goals_scored',
  ict_index: 'ict_index',
  influence: 'influence',
  kickoff_time: 'kickoff_time',
  minutes: 'minutes',
  modified: 'modified',
  opponent_team: 'opponent_team',
  own_goals: 'own_goals',
  penalties_missed: 'penalties_missed',
  penalties_saved: 'penalties_saved',
  red_cards: 'red_cards',
  saves: 'saves',
  selected: 'selected',
  starts: 'starts',
  team_a_score: 'team_a_score',
  team_h_score: 'team_h_score',
  threat: 'threat',
  total_points: 'total_points',
  transfers_balance: 'transfers_balance',
  transfers_in: 'transfers_in',
  transfers_out: 'transfers_out',
  value: 'value',
  was_home: 'was_home',
  yellow_cards: 'yellow_cards'
};

exports.Prisma.PlayersScalarFieldEnum = {
  player_id: 'player_id',
  name: 'name',
  position: 'position',
  team: 'team',
  element: 'element'
};

exports.Prisma.TeamsScalarFieldEnum = {
  team_id: 'team_id',
  name: 'name',
  abbreviation: 'abbreviation'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  gameweeks: 'gameweeks',
  merged_gw_summary: 'merged_gw_summary',
  mergedgw: 'mergedgw',
  player_stats: 'player_stats',
  players: 'players',
  teams: 'teams'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
